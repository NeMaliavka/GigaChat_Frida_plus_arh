import logging
from aiogram import F, Router, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.handlers.onboarding_handlers import start_fsm_scenario
from app.handlers.cancellation_handlers import start_cancellation_flow
from app.handlers import reschedule_handlers, check_booking_handlers, booking_handlers
from app.handlers.cancellation_handlers import CancelCallbackFactory
from app.db.database import get_or_create_user, save_history, load_history, get_all_active_lessons, increment_irrelevant_count, block_user
from app.core.template_service import find_template_by_keywords, build_template_response, TEMPLATES
from app.core.llm_service import get_llm_response, is_query_relevant_ai
from app.services.intent_recognizer import intent_recognizer_service
from app.core.admin_notifications import notify_admin_of_request, notify_admin_on_error, notify_admin_of_block
from app.utils.text_tools import correct_keyboard_layout
from app.utils.formatters import format_date_russian

from app.handlers.utils.keyboards import get_existing_user_menu, get_faq_menu

from aiogram.exceptions import TelegramBadRequest

from aiogram.filters import Command

router = Router()
IRRELEVANT_QUERY_LIMIT = 3
# =============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
# =============================================================================
from aiogram.filters import Command

@router.message(Command("booking"))
async def handle_booking_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /booking –∏–∑ –º–µ–Ω—é - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–∏—Å–∏."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /booking.")
    user = await get_or_create_user(message.from_user.id, message.from_user.username)
    if not user.onboarding_completed:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ó–∞–¥–∞–º –≤—Å–µ–≥–æ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await start_fsm_scenario(message, state)
    else:
        await message.answer("–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è...")
        await booking_handlers.start_booking_scenario(message, state)


@router.message(Command("my_lessons"))
async def handle_my_lessons_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /my_lessons –∏–∑ –º–µ–Ω—é - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–ø–∏—Å–µ–π."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /my_lessons.")
    await message.answer("–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç, –ø—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏...")
    await check_booking_handlers.start_check_booking_flow(
        message=message,
        state=state,
        user_id=message.from_user.id,
        username=message.from_user.username
    )


@router.message(Command("faq"))
async def handle_faq_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /faq –∏–∑ –º–µ–Ω—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /faq.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:", reply_markup=get_faq_menu())


@router.message(Command("help"))
async def handle_help_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –∏–∑ –º–µ–Ω—é - –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help.")
    await message.answer("–ü–æ–Ω–∏–º–∞—é, —Å–µ–π—á–∞—Å –ø–æ–∑–æ–≤—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    await notify_admin_of_request(bot=message.bot, user=message.from_user, request_text="–ö–ª–∏–µ–Ω—Ç –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help")
# =============================================================================
# –ë–õ–û–ö –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é
# =============================================================================


async def show_greeting_screen(message: types.Message, user, state: FSMContext, is_edit: bool = False):
    """
    –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã—Ö –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ú–æ–∂–µ—Ç –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ.
    """
    await state.clear()
    
    if user.onboarding_completed:
        logging.info(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}.")
        active_lessons = await get_all_active_lessons(user.id)
        parent_name = user.user_data.get('parent_name', '—É–≤–∞–∂–∞–µ–º—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å')
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {parent_name}! –†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        reply_markup = get_existing_user_menu(len(active_lessons))
    else:
        logging.info(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}.")
        text = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ù–æ—É–±–∞–≥, –≤–∞—à –ª–∏—á–Ω—ã–π AI-–º–µ–Ω–µ–¥–∂–µ—Ä –≤ —à–∫–æ–ª–µ 'No Bugs'.\n\n"
            "–†–∞–¥ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! –ß—Ç–æ–±—ã —è –º–æ–≥ –≤–∞–º –ø–æ–º–æ—á—å, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ."
        )
        reply_markup = InlineKeyboardBuilder().button(text="üöÄ –ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data="start_onboarding").as_markup()

    if is_edit:
        await message.edit_text(text, reply_markup=reply_markup)
    else:
        await message.answer(text, reply_markup=reply_markup)

# =============================================================================
# –ë–õ–û–ö  –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# =============================================================================

@router.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é."""
    ## LOG ##
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start.")
    user = await get_or_create_user(message.from_user.id, message.from_user.username)
    await show_greeting_screen(message, user, state)

# =============================================================================
# –ë–õ–û–ö  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (Callback-–∑–∞–ø—Ä–æ—Å—ã)
# =============================================================================

@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É 'main_menu'.")
    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    await show_greeting_screen(callback.message, user, state, is_edit=True)
    await callback.answer()

@router.callback_query(F.data == "start_onboarding")
async def cq_start_onboarding(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç FSM-—Å—Ü–µ–Ω–∞—Ä–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    ## LOG ##
    logging.info(f"User {callback.from_user.id} pressed 'start_onboarding'. Starting FSM.")
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º...")
    await start_fsm_scenario(callback.message, state)

@router.callback_query(F.data == "start_booking")
async def cq_start_booking(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏: –Ω–æ–≤—ã—Ö –≤–µ–¥–µ—Ç –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, —Å—Ç–∞—Ä—ã—Ö ‚Äî –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    ## LOG ##
    logging.info(f"User {callback.from_user.id} pressed 'start_booking'.")
    await callback.answer()
    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    if not user.onboarding_completed:
        ## LOG ##
        logging.info(f"User {user.id} is new, starting FSM onboarding from booking button.")
        await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ó–∞–¥–∞–º –≤—Å–µ–≥–æ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await start_fsm_scenario(callback.message, state)
    else:
        ## LOG ##
        logging.info(f"User {user.id} is existing, starting booking flow directly.")
        await callback.message.edit_text("–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è...")
        await booking_handlers.start_booking_flow(callback.message, state)

@router.callback_query(F.data == "check_booking")
async def cq_check_booking(callback: types.CallbackQuery, state: FSMContext):
    ## LOG ##
    logging.info(f"User {callback.from_user.id} pressed 'check_booking'.")
    await callback.message.edit_text("–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç, –ø—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏...")
    await check_booking_handlers.start_check_booking_flow(message=callback.message, 
        state=state, 
        user_id=callback.from_user.id,
        username=callback.from_user.username)
    
@router.callback_query(F.data == "reschedule_booking")
async def cq_reschedule_booking(callback: types.CallbackQuery, state: FSMContext):
    ## LOG ##
    logging.info(f"User {callback.from_user.id} pressed 'reschedule_booking'.")
    await reschedule_handlers.start_reschedule_flow(
        message=callback.message, 
        state=state, 
        user_id=callback.from_user.id,
        username=callback.from_user.username
    )
    await callback.answer()
    
@router.callback_query(F.data == "cancellation_request")
async def cq_cancellation_request(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ'.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ç –∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–π, —á—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã 'cancellation_request'.")
    await state.clear()
    # –ú—ã –±–µ—Ä–µ–º ID –∏–∑ callback.from_user, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –±–æ—Ç–∞.
    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    active_lessons = await get_all_active_lessons(user.id)

    if not active_lessons:
        await callback.message.edit_text("–Ø –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–ª, –Ω–æ —É –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    if len(active_lessons) == 1:
        lesson = active_lessons[0]
        lesson_time_str = format_date_russian(lesson.scheduled_at, 'short')
        
        builder.button(
            text="–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data=CancelCallbackFactory(action="confirm", lesson_id=lesson.id).pack()
        )
        builder.button(
            text="–ù–µ—Ç, –≤—Å—ë –≤ —Å–∏–ª–µ",
            callback_data=CancelCallbackFactory(action="reject").pack()
        )
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"–£ –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —É—Ä–æ–∫ –Ω–∞ {lesson_time_str}.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ö–∞–∫—É—é –∏–∑ –Ω–∏—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?")
        for lesson in active_lessons:
            child_name = user.user_data.get('child_name', '—Ä–µ–±–µ–Ω–∫–∞') if user.user_data else '—Ä–µ–±–µ–Ω–∫–∞'
            lesson_time_str = format_date_russian(lesson.scheduled_at, 'short')
            builder.button(
                text=f"–£—Ä–æ–∫ –¥–ª—è {child_name.capitalize()} –Ω–∞ {lesson_time_str}",
                callback_data=CancelCallbackFactory(action="select", lesson_id=lesson.id).pack()
            )
        builder.button(text="–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞)", callback_data=CancelCallbackFactory(action="reject").pack())
        builder.adjust(1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:", reply_markup=builder.as_markup())
    
    await callback.answer()

@router.callback_query(F.data == "human_operator")
async def cq_human_operator(callback: types.CallbackQuery):
    ## LOG ##
    logging.info(f"User {callback.from_user.id} pressed 'human_operator'. Notifying admin.")
    await callback.message.answer("–ü–æ–Ω–∏–º–∞—é, —Å–µ–π—á–∞—Å –ø–æ–∑–æ–≤—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    await notify_admin_of_request(bot=callback.bot, user=callback.from_user, request_text="–ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞'")
    await callback.answer()

@router.callback_query(F.data == "faq_menu")
async def cq_faq_menu(callback: types.CallbackQuery):
    ## LOG ##
    logging.info(f"User {callback.from_user.id} opened FAQ menu.")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:", reply_markup=get_faq_menu())

@router.callback_query(F.data.startswith("faq_"))
async def cq_faq_answer(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ FAQ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    """
    # –®–∞–≥ 1: –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –∫–Ω–æ–ø–∫–∏
    raw_callback_data = callback.data
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –∫–Ω–æ–ø–∫–∏ FAQ: '{raw_callback_data}'")

    # –®–∞–≥ 2: –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞
    question_key = raw_callback_data.split("_", 1)[1]
    logging.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–∞: '{question_key}'")

    # –®–∞–≥ 3: –õ–æ–≥–∏—Ä—É–µ–º —Å–∞–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞
    logging.info(f"–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞ –ø–æ –∫–ª—é—á—É: '{question_key}'")
    key, template = find_template_by_keywords(question_key)
    try:
        if template:
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω, –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
            user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
            response = await build_template_response(template, [], user.user_data)
            await callback.message.edit_text(response, reply_markup=get_faq_menu())
        else:
            # --- –£–õ–£–ß–®–ï–ù–ù–´–ô –ë–õ–û–ö –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–ö–ò ---
            logging.warning(f"–û–®–ò–ë–ö–ê: –®–∞–±–ª–æ–Ω –¥–ª—è FAQ-–∫–ª—é—á–∞ '{question_key}' –ù–ï –ù–ê–ô–î–ï–ù.")

            # 1. –¢–µ–ø–µ—Ä—å –º—ã –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –≤—ã–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            await notify_admin_of_request(
                bot=callback.bot,
                user=callback.from_user,
                request_text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É FAQ ¬´{question_key}¬ª, –Ω–æ —è –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å."
            )

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Å—Ç–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
            await callback.message.edit_text(
                "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. "
                "–ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, —è —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É, –∏ –æ–Ω —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å.",
                reply_markup=get_faq_menu()
            )
            
    except TelegramBadRequest as e:
        # 3. –õ–æ–≤–∏–º –æ—à–∏–±–∫—É "message is not modified", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–∞–¥–µ–Ω–∏—è
        if "message is not modified" in e.message:
            logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        else:
            raise # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–∞—è, –µ–µ –Ω—É–∂–Ω–æ –≤–∏–¥–µ—Ç—å

    finally:
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ "–∑–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await callback.answer()


# =============================================================================
# –ë–õ–û–ö 4: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# =============================================================================

@router.message(F.text, ~CommandStart())
async def handle_any_text(message: types.Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π."""
    ## LOG ##
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}. –¢–µ–∫—Å—Ç: '{message.text}'")
    original_text = message.text.strip()
    corrected_text = correct_keyboard_layout(original_text)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω, –∏–Ω–∞—á–µ - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
    user_text = corrected_text if corrected_text else original_text
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {message.from_user.id}. –û—Ä–∏–≥–∏–Ω–∞–ª: '{original_text}', –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: '{user_text}'")
    history = await load_history(str(message.from_user.id))
    try:
        user = await get_or_create_user(message.from_user.id, message.from_user.username)
        if user.is_blocked:
            ## LOG ##
            logging.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –ø–æ —Ç–µ–º–µ. \n\n"
                "–ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, —è —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É, –∏ –æ–Ω —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è, —á—Ç–æ–±—ã –≤–æ –≤—Å–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è."
            )
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥,
        # —Ç–æ –ª—é–±–æ–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.
        if not user.onboarding_completed:
            logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞—á–∏–Ω–∞–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é")
            await show_greeting_screen(message, user, state)
            return
        await save_history(str(user.id), "user", message.text.strip())
        user_text = message.text.strip()
        
        detected_intent = intent_recognizer_service.get_intent(user_text.lower())
        
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ–Ω—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if detected_intent:
            ## LOG ##
            logging.info(f"–ù–∞–º–µ—Ä–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: '{detected_intent}'.")
            match detected_intent:
                case "booking_request":
                    await message.answer("–ö–æ–Ω–µ—á–Ω–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", 
                        reply_markup=InlineKeyboardBuilder().button(text="‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", 
                        callback_data="start_booking").as_markup())
                    return
                case "cancellation":
                    await start_cancellation_flow(
                        message=message, 
                        state=state, 
                        user_id=user.id, 
                        username=message.from_user.username
                    )
                    return
                case "reschedule":
                    await reschedule_handlers.start_reschedule_flow(
                        message=message, 
                        state=state, 
                        user_id=user.id, 
                        username=message.from_user.username
                    )
                    return
                case "check_booking":
                    await check_booking_handlers.start_check_booking_flow(
                        message=message,
                        state=state,
                        user_id=message.from_user.id,
                        username=message.from_user.username
                    )
                    return
                case "price_request" | "course_details" | "social_status_info" | "lesson_individuality":
                    template = TEMPLATES.get(detected_intent)
                    
                    if template:
                        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—Ç—Ä–æ–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                        response = await build_template_response(template, history, user.user_data)
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
                        keyboard = None
                        if detected_intent == "lesson_individuality":
                            builder = InlineKeyboardBuilder()
                            builder.button(text="‚úçÔ∏è –î–∞, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫", callback_data="start_booking")
                            keyboard = builder.as_markup()
                        await message.answer(response, reply_markup=keyboard)
                        return
                    else:
                        # –≠—Ç–∞ –≤–µ—Ç–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
                        # (–∏–Ω—Ç–µ–Ω—Ç –µ—Å—Ç—å, –∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –Ω–µ–≥–æ –Ω–µ—Ç)
                        logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ò–Ω—Ç–µ–Ω—Ç '{detected_intent}' –µ—Å—Ç—å, –Ω–æ —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–µ–≥–æ –≤ templates.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                case "greeting":
                    user = await get_or_create_user(message.from_user.id, message.from_user.username)
                    parent_name = user.user_data.get('parent_name', message.from_user.first_name)
                    await show_greeting_screen(message, user, state)
                    return
                case "human_operator":
                    await message.answer("–ü–æ–Ω–∏–º–∞—é, —Å–µ–π—á–∞—Å –ø–æ–∑–æ–≤—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞."); await notify_admin_of_request(bot=message.bot, user=message.from_user, request_text=user_text); return

        ## LOG ##
        logging.info(f"No direct intent match for user {user.id}. Proceeding to relevancy check and LLM.")
        
        if not await is_query_relevant_ai(user_text, history):
            ## LOG ##
            logging.warning(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π.")
            user.irrelevant_count += 1
            remaining_attempts = IRRELEVANT_QUERY_LIMIT - user.irrelevant_count
            if remaining_attempts > 0:
                await increment_irrelevant_count(user.id)
                await message.answer(
                    "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ —Å–æ–≤—Å–µ–º –≤–∞—Å –ø–æ–Ω—è–ª. –ü–æ—Ö–æ–∂–µ, –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–ø–µ—á–∞—Ç–∫–∞ –∏–ª–∏ –æ–Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–±–æ—Ç–æ–π –Ω–∞—à–µ–π —à–∫–æ–ª—ã. \n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –∫—É—Ä—Å–∞–º–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é."
                )
            else:
                ## LOG ##
                logging.warning(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –∏–∑-–∑–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
                await block_user(user.id)
                await notify_admin_of_block(
                    bot=message.bot, 
                    user=message.from_user, 
                    history=history,
                    reason="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤" # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É
                )
                await message.answer("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –ø–æ —Ç–µ–º–µ. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É, —è –µ–º—É —É–∂–µ –≤—Å—ë –ø–µ—Ä–µ–¥–∞–ª.")
            return

        ## LOG ##
        logging.info(f"Query from {user.id} is relevant. Sending to LLM.")
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        llm_response = await get_llm_response(user_text, history)
        await message.answer(llm_response)

    except Exception as e:
        ## LOG ##
        logging.error(f"CRITICAL ERROR in 'handle_any_text' from {message.from_user.id}: {e}", exc_info=True)
        await notify_admin_on_error(bot=message.bot, user_id=message.from_user.id, username=message.from_user.username, error_description=str(e), history=history)
        await message.answer("–û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –Ø —É–∂–µ —Å–æ–æ–±—â–∏–ª –∫–æ–º–∞–Ω–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ.")
