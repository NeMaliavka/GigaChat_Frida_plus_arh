# app/handlers/booking_handlers.py

import logging
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from app.db.database import get_or_create_user, add_trial_lesson
from app.states.fsm_states import BookingFSM
from app.services.bitrix_service import book_lesson
from app.utils.formatters import format_date_russian, get_user_data_summary
from app.handlers.utils.booking_utils import show_available_dates, get_time_keyboard
from app.handlers import reschedule_handlers, onboarding_handlers

router = Router()

async def start_booking_scenario(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã.
    """
    await state.set_state(BookingFSM.choosing_date)
    await show_available_dates(message, state)


@router.callback_query(F.data == "start_booking")
async def handle_start_booking_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É "–î–∞, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è".
    """
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —É—Ä–æ–∫–∞.")
    await start_booking_scenario(callback.message, state)
    await callback.answer()


@router.callback_query(BookingFSM.choosing_date, F.data.startswith("book_date:"))
async def handle_date_selection(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ü–ï–†–ï–ö–õ–Æ–ß–ê–ï–¢ –°–û–°–¢–û–Ø–ù–ò–ï.
    """
    selected_date = callback.data.split(":")[1]
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: {selected_date}")
    await state.update_data(selected_date=selected_date)
    await state.set_state(BookingFSM.choosing_time)
    keyboard = await get_time_keyboard(state, selected_date)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(BookingFSM.choosing_time, F.data == "back_to_dates")
async def handle_back_to_dates_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è".
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã.")
    await start_booking_scenario(callback.message, state)
    await callback.answer()


@router.callback_query(BookingFSM.choosing_time, F.data.startswith("book_time:"))
async def handle_time_selection(callback: types.CallbackQuery, state: FSMContext):
    """
    –õ–æ–≤–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏, –≤—ã–∑—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç FSM.
    """
    await callback.message.edit_text("‚è≥ –ú–∏–Ω—É—Ç–∫—É, –±—Ä–æ–Ω–∏—Ä—É—é –¥–ª—è –≤–∞—Å —ç—Ç–æ—Ç —Å–ª–æ—Ç...")
    fsm_data = await state.get_data()
    user_db = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    user_details = user_db.user_data or {}
    
    client_data = {
        'username': callback.from_user.username or "N/A",
        'parent_name': user_details.get('parent_name'),
        'child_name': user_details.get('child_name'),
        'child_age': user_details.get('child_age'),
        'child_interests': user_details.get('child_interests', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')
    }
    
    selected_time_str = callback.data.split(":", 1)[1]
    start_time = datetime.fromisoformat(selected_time_str).replace(tzinfo=ZoneInfo("Europe/Moscow"))
    teacher_id = int(fsm_data.get("selected_teacher_id", "1"))

    logging.info(f"–í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ book_lesson –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_db.id}. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_id}, –í—Ä–µ–º—è: {start_time}")
    
    task_id, event_id, teacher_name = await book_lesson(
        user_id=teacher_id,
        start_time=start_time,
        duration_minutes=60,
        client_data=client_data
    )

    if task_id and event_id:
        await add_trial_lesson(user_db.id, task_id, event_id, teacher_id, start_time)
        lesson_time_str = format_date_russian(start_time, 'full')
        await callback.message.edit_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –≥–æ—Ç–æ–≤–æ!\n\n"
            f"–Ø –∑–∞–ø–∏—Å–∞–ª(–∞) –≤–∞—Å –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {teacher_name}.\n\n"
            f"–ñ–¥–µ–º –≤–∞—Å {lesson_time_str}.\n\n"
            f"–ù–∞–ø–æ–º–Ω—é –æ –∑–∞–Ω—è—Ç–∏–∏ –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏!"
        )
    else:
        await callback.message.edit_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç. "
            "–í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
        )
    
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "initiate_reschedule")
async def handle_initiate_reschedule_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é".
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é'. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ–Ω–æ—Å–∞.")
    await reschedule_handlers.start_reschedule_flow(
        message=callback.message,
        state=state,
        user_id=callback.from_user.id,
        username=callback.from_user.username
    )
    await callback.answer()


@router.callback_query(F.data == "start_booking_additional")
async def handle_start_booking_additional_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞".
    –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞'.")
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞."
    )
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω—É–ª—è, –±–µ–∑ –≤—Å—è–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    await onboarding_handlers.start_fsm_scenario(callback.message, state)
    await callback.answer()

