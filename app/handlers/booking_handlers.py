# app/handlers/booking_handlers.py

import logging
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.db.database import get_or_create_user, add_trial_lesson, get_all_active_lessons
from app.states.fsm_states import BookingFSM
from app.services.bitrix_service import book_lesson
from app.utils.formatters import format_date_russian, get_user_data_summary
from app.handlers.utils.booking_utils import show_available_dates, get_time_keyboard
from app.handlers import reschedule_handlers, onboarding_handlers
from app.core.admin_notifications import notify_admin_of_request

from app.utils.text_tools import inflect_name
from app.handlers.utils.keyboards import get_faq_menu

router = Router()

async def start_booking_scenario(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã.
    """
    await state.set_state(BookingFSM.choosing_date)
    await show_available_dates(message, state)

def get_duplicate_booking_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –¥—É–±–ª–∏–∫–∞—Ç–µ –∑–∞–ø–∏—Å–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üóìÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="check_booking")
    builder.button(text="üë®‚Äçüëß‚Äçüë¶ –î–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞", callback_data="add_second_child")
    builder.button(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    return builder.as_markup()

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_add_second_child_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –æ—Ç–ª–∏—á–Ω–æ!", callback_data="add_second_child_confirm")
    builder.button(text="üë©‚Äçüíº –ù—É–∂–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä", callback_data="add_second_child_manager")
    builder.button(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_final_booking_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üóìÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="check_booking")
    builder.button(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    return builder.as_markup()

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø FAQ –ö–õ–ê–í–ò–ê–¢–£–†–´ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤) ---
# def get_faq_menu_keyboard():
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é —Å —á–∞—Å—Ç—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
#     builder = InlineKeyboardBuilder()
#     builder.button(text="üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã", callback_data="faq_price")
#     builder.button(text="üìö –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫—É—Ä—Å–∞", callback_data="faq_structure")
#     builder.button(text="üè´ –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∫—É—Ä—Å–∞–º–∏?", callback_data="faq_difference")
#     builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
#     builder.adjust(1)
#     return builder.as_markup()


@router.callback_query(F.data == "start_booking")
async def handle_start_booking_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É "–î–∞, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è".
    """
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —É—Ä–æ–∫–∞.")
    await start_booking_scenario(callback.message, state)
    await callback.answer()


@router.callback_query(BookingFSM.choosing_date, F.data.startswith("book_date:"))
async def handle_date_selection(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ü–ï–†–ï–ö–õ–Æ–ß–ê–ï–¢ –°–û–°–¢–û–Ø–ù–ò–ï.
    """
    selected_date = callback.data.split(":")[1]
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: {selected_date}")
    await state.update_data(selected_date=selected_date)
    await state.set_state(BookingFSM.choosing_time)
    keyboard = await get_time_keyboard(state, selected_date)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(BookingFSM.choosing_time, F.data == "back_to_dates")
async def handle_back_to_dates_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è".
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã.")
    await start_booking_scenario(callback.message, state)
    await callback.answer()


@router.callback_query(BookingFSM.choosing_time, F.data.startswith("book_time:"))
async def handle_time_selection(callback: types.CallbackQuery, state: FSMContext):
    """
    –õ–æ–≤–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –¥—É–±–ª–∏, –≤—ã–∑—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç FSM.
    """
    fsm_data = await state.get_data()
    user_db = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    
    # --- –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê –ù–ê –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –ó–ê–ü–ò–°–¨ ---
    existing_lessons = await get_all_active_lessons(user_db.id)
    if existing_lessons:
        await callback.message.edit_text(
            "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫. "
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.",
            reply_markup=get_duplicate_booking_keyboard() 
        )
        await callback.answer()
        return

    await callback.message.edit_text("‚è≥ –ú–∏–Ω—É—Ç–∫—É, –±—Ä–æ–Ω–∏—Ä—É—é –¥–ª—è –≤–∞—Å —ç—Ç–æ—Ç —Å–ª–æ—Ç...")
    user_details = user_db.user_data or {}
    
    client_data = {
        'username': callback.from_user.username or "N/A",
        'parent_name': user_details.get('parent_name'),
        'child_name': user_details.get('child_name'),
        'child_age': user_details.get('child_age'),
        'child_interests': user_details.get('child_interests', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')
    }
    
    selected_time_str = callback.data.split(":", 1)[1]
    start_time = datetime.fromisoformat(selected_time_str).replace(tzinfo=ZoneInfo("Europe/Moscow"))
    teacher_id = int(fsm_data.get("selected_teacher_id", "1"))

    logging.info(f"–í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ book_lesson –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_db.id}. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_id}, –í—Ä–µ–º—è: {start_time}")
    
    task_id, event_id, teacher_name = await book_lesson(
        user_id=teacher_id,
        start_time=start_time,
        duration_minutes=60,
        client_data=client_data
    )

    if task_id and event_id:
        await add_trial_lesson(user_db.id, task_id, event_id, teacher_id, start_time)
        lesson_time_str = format_date_russian(start_time, 'full')
        await callback.message.edit_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –≥–æ—Ç–æ–≤–æ!\n\n"
            f"–Ø –∑–∞–ø–∏—Å–∞–ª(–∞) –≤–∞—Å –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –¥–ª—è **{client_data.get('child_name')}** –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {teacher_name}.\n\n"
            f"–ñ–¥–µ–º –≤–∞—Å {lesson_time_str}.\n\n"
            f"–ù–∞–ø–æ–º–Ω—é –æ –∑–∞–Ω—è—Ç–∏–∏ –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
            reply_markup=get_final_booking_keyboard() 
        )
    else:
        await callback.message.edit_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç. "
            "–í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
        )
    
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "initiate_reschedule")
async def handle_initiate_reschedule_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é".
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é'. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ–Ω–æ—Å–∞.")
    await reschedule_handlers.start_reschedule_flow(
        message=callback.message,
        state=state,
        user_id=callback.from_user.id,
        username=callback.from_user.username
    )
    await callback.answer()


@router.callback_query(F.data == "start_booking_additional")
async def handle_start_booking_additional_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞".
    –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞'.")
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞."
    )
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω—É–ª—è, –±–µ–∑ –≤—Å—è–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    await onboarding_handlers.start_fsm_scenario(callback.message, state)
    await callback.answer()

# =============================================================================
# –ù–û–í–´–ô –ë–õ–û–ö: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
# =============================================================================

@router.callback_query(F.data == "add_second_child")
async def handle_add_second_child_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞".
    """
    logging.info(f"User {callback.from_user.id} wants to add a second child.")
    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    
    child_name_raw = user.user_data.get('child_name', '–≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞') if user.user_data else '–≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞'
    child_name = child_name_raw.capitalize()

    message_text = (
        f"–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –ï—Å–ª–∏ –≤–∞—à–µ–º—É –≤—Ç–æ—Ä–æ–º—É —Ä–µ–±–µ–Ω–∫—É –æ—Ç 10 –¥–æ 17 –ª–µ—Ç, "
        f"–æ–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–±–Ω–æ–º—É —É—Ä–æ–∫—É –≤–º–µ—Å—Ç–µ —Å {child_name}. "
        f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—Ç–æ—Ä–æ–π —Ä–µ–±–µ–Ω–æ–∫ –¥—Ä—É–≥–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞, –ª—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
    )

    await callback.message.edit_text(
        message_text,
        reply_markup=get_add_second_child_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "add_second_child_confirm")
async def handle_add_second_child_confirm_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ '–î–∞, –æ—Ç–ª–∏—á–Ω–æ'.
    """
    logging.info(f"User {callback.from_user.id} confirmed the second child info.")
    
    await callback.message.edit_text(
        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –†–∞–¥—ã, —á—Ç–æ —É –≤–∞—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ –±—É–¥—É—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤. "
        "–¢–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –ñ–¥–µ–º –≤–∞—Å –Ω–∞ —É—Ä–æ–∫–µ!\n\n"
        "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu").as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_second_child_manager")
async def handle_add_second_child_manager_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –≤–æ–ø—Ä–æ—Å—É –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞, –¥–æ–±–∞–≤–ª—è—è "—á–µ–ª–æ–≤–µ—á–Ω—É—é" –ø–∞—É–∑—É.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ")
    
    await notify_admin_of_request(
        bot=callback.bot, 
        user=callback.from_user, 
        request_text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∑–∞–ø–∏—Å—å—é –≤—Ç–æ—Ä–æ–≥–æ —É—á–µ–Ω–∏–∫–∞."
    )
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.delete()
    # –î–ï–õ–ê–ï–ú –ü–ê–£–ó–£, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    await asyncio.sleep(1.5)
    
    await callback.message.answer(
        "–Ø –ø–µ—Ä–µ–¥–∞–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ–Ω —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è. "
        "–ê –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–µ–π —à–∫–æ–ª–µ.",
        # --- –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–ù–£–Æ –§–£–ù–ö–¶–ò–Æ ---
        reply_markup=get_faq_menu()
    )
    await callback.answer()