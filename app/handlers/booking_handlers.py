# app/handlers/booking_handlers.py

import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from typing import Union
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from app.states.fsm_states import BookingFSM
from app.utils.formatters import format_date_russian
from app.services.bitrix_service import get_free_slots, book_lesson
from app.db.database import get_or_create_user, add_trial_lesson
from app.config import TEACHER_IDS

router = Router()


async def start_booking_scenario(message: Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ –æ—Ç LLM.
    """
    logging.info(f"–ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {message.from_user.id} –∏–∑ sales_funnel.")
    await state.clear()
    await _show_available_dates(message, state)


@router.callback_query(F.data == "start_booking")
async def handle_start_booking_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" –∏–ª–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è".
    """
    await _show_available_dates(callback, state)


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –§–£–ù–ö–¶–ò–ò ---
async def _show_available_dates(event: Union[Message, CallbackQuery], state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ—Ç—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã.
    """
    is_callback = isinstance(event, CallbackQuery)
    message_to_edit: Message

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if is_callback:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–±—ç–∫, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
        message_to_edit = event.message
        try:
            await message_to_edit.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        except TelegramBadRequest:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            pass
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –°–û–•–†–ê–ù–Ø–ï–ú –µ–≥–æ
        user_message = event
        message_to_edit = await user_message.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    # –í—Å—è –¥–∞–ª—å–Ω–µ–π—à–∞—è —Ä–∞–±–æ—Ç–∞ –∏–¥–µ—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π message_to_edit
    try:
        portal_tz = ZoneInfo("Europe/Moscow")
        now = datetime.now(portal_tz)
        free_slots_by_date = await get_free_slots(from_date=now, to_date=now + timedelta(days=7), user_ids=TEACHER_IDS)

        if not free_slots_by_date:
            await message_to_edit.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω –Ω–µ—Ç.")
            if is_callback:
                await event.answer()
            return

        await state.update_data(free_slots=free_slots_by_date)
        date_buttons = [[InlineKeyboardButton(text=format_date_russian(datetime.strptime(date_str, '%Y-%m-%d'), 'full'), callback_data=f"book_date:{date_str}")] for date_str in sorted(free_slots_by_date.keys())]
        keyboard = InlineKeyboardMarkup(inline_keyboard=date_buttons)

        await state.set_state(BookingFSM.choosing_date)
        await message_to_edit.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å:", reply_markup=keyboard)

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∞—Ç: {e}", exc_info=True)
        await message_to_edit.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if is_callback:
            await event.answer()


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
# (–í–∞—à –∫–æ–¥ –¥–ª—è –Ω–∏—Ö —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω)

@router.callback_query(BookingFSM.choosing_date, F.data.startswith("book_date:"))
async def handle_date_selection(callback: types.CallbackQuery, state: FSMContext):
    # ... –≤–∞—à –∫–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã ...
    selected_date = callback.data.split(":")[1]
    fsm_data = await state.get_data()
    slots_for_date = fsm_data.get('free_slots', {}).get(selected_date, [])
    unique_times = sorted(list(set(s['time'] for s in slots_for_date)))
    time_buttons = [
        InlineKeyboardButton(text=time_str, callback_data=f"book_time:{selected_date}T{time_str}")
        for time_str in unique_times
    ]
    grouped_buttons = [time_buttons[i:i + 3] for i in range(0, len(time_buttons), 3)]
    grouped_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="start_booking")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=grouped_buttons)
    formatted_date = format_date_russian(datetime.strptime(selected_date, '%Y-%m-%d'), 'full')
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {formatted_date}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
    await state.set_state(BookingFSM.choosing_time)
    await callback.answer()


@router.callback_query(BookingFSM.choosing_time, F.data.startswith("book_time:"))
async def handle_time_selection(callback: types.CallbackQuery, state: FSMContext):
    # ... –≤–∞—à –∫–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ...
    await callback.message.edit_text("–°–µ–∫—É–Ω–¥–æ—á–∫—É, —Å–≤–µ—Ä—è—é—Å—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º...")
    datetime_str = callback.data.split(":", 1)[1]
    start_time = datetime.strptime(datetime_str, '%Y-%m-%dT%H:%M').replace(tzinfo=ZoneInfo("Europe/Moscow"))
    fsm_data = await state.get_data()
    user_db = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    client_data = user_db.user_data or {}
    client_data['username'] = callback.from_user.username
    selected_date_str = start_time.strftime('%Y-%m-%d')
    selected_time_str = start_time.strftime('%H:%M')
    all_slots_for_date = fsm_data.get('free_slots', {}).get(selected_date_str, [])
    slot_info_list = [s for s in all_slots_for_date if s['time'] == selected_time_str]
    if not slot_info_list:
        await callback.message.edit_text("üòî –û–π, –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="start_booking")]]))
        await callback.answer()
        return
    available_teacher_ids = slot_info_list[0]['user_ids']
    created_task_id, created_event_id, assigned_teacher_name = None, None, None
    for teacher_id in available_teacher_ids:
        task_id, event_id, teacher_name = await book_lesson(user_id=teacher_id, start_time=start_time, duration_minutes=60, client_data=client_data)
        if task_id and event_id:
            created_task_id, created_event_id, assigned_teacher_name = task_id, event_id, teacher_name
            break
    if created_task_id and created_event_id:
        confirmation_date = format_date_russian(start_time, 'short')
        await add_trial_lesson(user_id=user_db.id, task_id=created_task_id, event_id=created_event_id, scheduled_at=start_time)
        await callback.message.edit_text(f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ {confirmation_date}. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤–∞—à–µ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é: {assigned_teacher_name}. –î–æ –≤—Å—Ç—Ä–µ—á–∏!", reply_markup=None)
        await state.clear()
    else:
        await callback.message.edit_text("üòî –û–π, –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="start_booking")]]))
    await callback.answer()

