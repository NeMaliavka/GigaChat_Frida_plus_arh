# app/handlers/reschedule_handlers.py

import logging
from datetime import datetime
from zoneinfo import ZoneInfo
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.db.database import get_or_create_user, get_active_lesson, update_trial_lesson_time
from app.states.fsm_states import BookingFSM
from app.handlers.booking_handlers import _show_available_dates, _get_time_keyboard
from app.services.bitrix_service import reschedule_booking
from app.utils.formatters import format_date_russian

router = Router()

async def initiate_reschedule_from_text(message: types.Message, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –æ—Ç {message.from_user.id} —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É.")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å", callback_data="initiate_reschedule")]
    ])
    await message.answer(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è?",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "initiate_reschedule")
async def start_reschedule_flow(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    await state.clear()
    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    active_lesson = await get_active_lesson(user.id)

    if not active_lesson:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–î–∞, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="start_booking")]])
        await callback.message.edit_text("–Ø –ø—Ä–æ–≤–µ—Ä–∏–ª, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.\n\n–î–∞–≤–∞–π—Ç–µ —è –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–π?", reply_markup=keyboard)
        await callback.answer()
        return
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ scheduled_at - —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç datetime, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –º–µ—Ç–æ–¥—ã.
    if not isinstance(active_lesson.scheduled_at, datetime):
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–∫–∞ {active_lesson.id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞. –ü–µ—Ä–µ–Ω–æ—Å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —É—Ä–æ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await callback.answer()
        return
    
    await state.update_data(
        lesson_to_reschedule_id=active_lesson.id,
        task_id=active_lesson.task_id,
        event_id=active_lesson.event_id,
        teacher_id=active_lesson.teacher_id,
        old_start_time=active_lesson.scheduled_at.isoformat()
    )

    lesson_time_str = active_lesson.scheduled_at.strftime("%d.%m.%Y –≤ %H:%M")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è", callback_data="confirm_reschedule")],
        [InlineKeyboardButton(text="–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞)", callback_data="cancel_action")]
    ])
    await callback.message.edit_text(f"–í–∞—à —É—Ä–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {lesson_time_str}.\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è?", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "confirm_reschedule")
async def confirm_reschedule(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∫–∞–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç."""
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è.")
    await state.set_state(BookingFSM.rescheduling_in_progress)
    await _show_available_dates(callback, state)
    await callback.answer()

@router.callback_query(BookingFSM.rescheduling_in_progress, F.data.startswith("book_date:"))
async def handle_reschedule_date_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –î–ê–¢–´ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞, –°–û–•–†–ê–ù–Ø–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï."""
    selected_date = callback.data.split(":")[1]
    await state.update_data(selected_date=selected_date)
    keyboard = await _get_time_keyboard(state, selected_date)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(BookingFSM.rescheduling_in_progress, F.data.startswith("book_time:"))
async def handle_reschedule_time_selection(callback: types.CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –í–†–ï–ú–ï–ù–ò, –≤—ã–∑—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ü–ï–†–ï–ù–û–°–ê –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    await callback.message.edit_text("–ú–∏–Ω—É—Ç–∫—É, –ø–µ—Ä–µ–Ω–æ—à—É –≤–∞—à—É –∑–∞–ø–∏—Å—å –Ω–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è...")

    fsm_data = await state.get_data()
    user_db = await get_or_create_user(callback.from_user.id, callback.from_user.username)

    datetime_str = callback.data.split(":", 1)[1]
    new_start_time = datetime.strptime(datetime_str, '%Y-%m-%dT%H:%M').replace(tzinfo=ZoneInfo("Europe/Moscow"))
    old_start_time = datetime.fromisoformat(fsm_data.get("old_start_time"))

    # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-–ø–æ–ª—è user_data. –ò–º—è —Ä–µ–±—ë–Ω–∫–∞ —Ç–∞–º —É–∂–µ –µ—Å—Ç—å.
    client_data = user_db.user_data or {}
    # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π username
    client_data['username'] = callback.from_user.username
    # –°—Ç—Ä–æ–∫–∞ client_data['child_name'] = user_db.child_name –±—ã–ª–∞ –æ—à–∏–±–æ—á–Ω–æ–π –∏ –£–î–ê–õ–ï–ù–ê.
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    success = await reschedule_booking(
        task_id=fsm_data.get("task_id"),
        event_id=fsm_data.get("event_id"),
        old_start_time=old_start_time,
        new_start_time=new_start_time,
        teacher_id=fsm_data.get("teacher_id"),
        client_data=client_data
    )

    if success:
        await update_trial_lesson_time(fsm_data.get("lesson_to_reschedule_id"), new_start_time)
        new_time_str = format_date_russian(new_start_time, 'short')
        await callback.message.edit_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {new_time_str}.")
    else:
        await callback.message.edit_text("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å. –°–ª–æ—Ç –º–æ–≥ –±—ã—Ç—å –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")

    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel_action")
async def cancel_any_action(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å."""
    await state.clear()
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ, —è –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!")
    await callback.answer()
