# app/utils/formatters.py

import logging
import re
from datetime import datetime

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
MONTHS_RU = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}
WEEKDAYS_RU = {
    0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–í—Ç–æ—Ä–Ω–∏–∫", 2: "–°—Ä–µ–¥–∞", 3: "–ß–µ—Ç–≤–µ—Ä–≥",
    4: "–ü—è—Ç–Ω–∏—Ü–∞", 5: "–°—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

try:
    from app.utils.text_tools import inflect_name
    MORPHOLOGY_ENABLED = True
except ImportError:
    logging.warning("–£—Ç–∏–ª–∏—Ç—ã –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ (text_tools.py) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    MORPHOLOGY_ENABLED = False
    def inflect_name(name: str, _: str) -> str: return name

def format_response_with_inflection(template: str, data: dict) -> str:
    """
    –ù–∞–¥–µ–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É: —Å–Ω–∞—á–∞–ª–∞ —Å–∫–ª–æ–Ω—è–µ—Ç –∏–º–µ–Ω–∞, –∞ –∑–∞—Ç–µ–º –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    –ò—â–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤–∏–¥–∞ {child_name:datv} –∏ –ø—Ä–æ—Å—Ç—ã–µ {parent_name}.
    """
    if not template: return ""

    processed_template = template

    if MORPHOLOGY_ENABLED:
        # –®–∞–≥ 1: –ù–∞–π—Ç–∏ –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, {child_name:datv})
        inflection_placeholders = re.findall(r'\{(\w+):(\w+)\}', template)
        
        for var_name, case in inflection_placeholders:
            placeholder_to_replace = f"{{{var_name}:{case}}}"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¢–∞—Ç—å—è–Ω–∞")
            original_value = data.get(var_name, "")
            
            # –°–∫–ª–æ–Ω—è–µ–º –µ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ "–¢–∞—Ç—å—è–Ω–µ")
            inflected_value = inflect_name(str(original_value), case)
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤ —à–∞–±–ª–æ–Ω–µ
            processed_template = processed_template.replace(placeholder_to_replace, inflected_value)

    # –®–∞–≥ 2: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Å—Ç—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, {parent_name})
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π .format() —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return processed_template.format(**data)
    except KeyError as e:
        logging.warning(f"–í —à–∞–±–ª–æ–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞: {e}. –®–∞–±–ª–æ–Ω: '{processed_template}'")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å —Å –æ—à–∏–±–∫–æ–π
        return processed_template

def format_date_russian(dt: datetime, mode: str = 'full') -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç datetime –≤ –∫—Ä–∞—Å–∏–≤—É—é —Ä—É—Å—Å–∫—É—é —Å—Ç—Ä–æ–∫—É.

    Args:
        dt (datetime): –û–±—ä–µ–∫—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.
        mode (str): –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
                    'full' -> "17 –∏—é–ª—è (–ß–µ—Ç–≤–µ—Ä–≥) –≤ 17:00"
                    'short' -> "17 –∏—é–ª—è –≤ 17:00"

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
    """
    if not isinstance(dt, datetime):
        logging.error(f"–í format_date_russian –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: {type(dt)}")
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"

    day = dt.day
    month = MONTHS_RU.get(dt.month, "")
    weekday = WEEKDAYS_RU.get(dt.weekday(), "")
    time_str = dt.strftime('%H:%M')

    if mode == 'full':
        return f"{day} {month} ({weekday}) –≤ {time_str}"
    
    elif mode == 'short':
        return f"{day} {month} –≤ {time_str}"
    
    return dt.strftime('%d.%m.%Y %H:%M')


# --- –í–û–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
def get_user_data_summary(user_data: dict, for_bitrix: bool = False) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ –∞–Ω–∫–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –∏–ª–∏ Bitrix24.
    """
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è "–Ω–µ —É–∫–∞–∑–∞–Ω–æ" –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    parent_name = user_data.get('q1', "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    child_name = user_data.get('q2', "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    child_age = user_data.get('q3', "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    child_interests = user_data.get('q4', "–Ω–µ —É–∫–∞–∑–∞–Ω—ã")
    username = user_data.get('username', "N/A")

    if for_bitrix:
        # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Bitrix24
        return (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –æ—Ç @{username}.\n\n"
            f"[B]–†–æ–¥–∏—Ç–µ–ª—å:[/B] {parent_name}\n"
            f"[B]–£—á–µ–Ω–∏–∫:[/B] {child_name}\n"
            f"[B]–í–æ–∑—Ä–∞—Å—Ç —É—á–µ–Ω–∏–∫–∞:[/B] {child_age}\n"
            f"[B]–£–≤–ª–µ—á–µ–Ω–∏—è:[/B] {child_interests}\n\n"
            f"[B]–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è:[/B] —á–µ—Ä–µ–∑ Telegram (@{username})"
        )
    else:
        # –§–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        # –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
        return (
            f"–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–º:\n\n"
            f"üôã‚Äç‚ôÇÔ∏è **–†–æ–¥–∏—Ç–µ–ª—å:** {parent_name}\n"
            f"üë∂ **–£—á–µ–Ω–∏–∫:** {child_name}, {child_age} –ª–µ—Ç\n"
            f"üéÆ **–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {child_interests}"
        )
# --- –ö–û–ù–ï–¶ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---
